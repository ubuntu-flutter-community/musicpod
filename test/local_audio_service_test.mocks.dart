// Mocks generated by Mockito 5.4.5 from annotations
// in musicpod/test/local_audio_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:musicpod/local_audio/local_cover_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocalCoverService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalCoverService extends _i1.Mock implements _i2.LocalCoverService {
  MockLocalCoverService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<bool> get propertiesChanged => (super.noSuchMethod(
        Invocation.getter(#propertiesChanged),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);

  @override
  int get storeLength =>
      (super.noSuchMethod(Invocation.getter(#storeLength), returnValue: 0)
          as int);

  @override
  _i3.Future<_i4.Uint8List?> getCover({
    required String? albumId,
    required String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getCover, [], {#albumId: albumId, #path: path}),
        returnValue: _i3.Future<_i4.Uint8List?>.value(),
      ) as _i3.Future<_i4.Uint8List?>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
